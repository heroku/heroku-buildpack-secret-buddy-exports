#!/usr/bin/env python3

import os, json
import sys
import re

CYAN = "\033[36m"
RESET = "\033[0m"

secretbuddy_env_var = "SECRETBUDDY_ENV"
secretbuddy_data = os.getenv(secretbuddy_env_var)
if not secretbuddy_data:
    print(f"{secretbuddy_env_var} is not set or is an empty string.")
    sys.exit(1)

try:
  secretbuddy_data_json = json.loads(secretbuddy_data)
except json.JSONDecodeError as e:
  print(f"Error decoding JSON from environment variable '{secretbuddy_env_var}': {e}")
  sys.exit(1)

# --------------------------------------------------------------------------------------------------
print("1 - Config vars with different values than Secretbuddy vars: ", end="")
found = False
for k, v in secretbuddy_data_json["current"].items():
    env_value = os.getenv(k)
    if env_value is None:
      continue
    if v != env_value:
      if not found:
        print(end="\n")
        found = True
      print(f"\t{CYAN}{k}, value:{env_value} secretbuddy:{v}{RESET}")

if not found:
  print(f"{CYAN}None{RESET}")

# --------------------------------------------------------------------------------------------------
print("2 - (secret) Config vars that does not exist in Secretbuddy vars: ", end="")
pattern = re.compile(r'(?i).*(secret|token|key|pass|auth|cred|certificate|cert|bearer|sign|salt).*')
found = False
for key, value in os.environ.items():
    #print("JLD: ", key)
    if key == secretbuddy_env_var:
      continue
    if pattern.match(key):
      #print("JLD matcheo")
      #print(secretbuddy_data_json["current"])
      if key not in secretbuddy_data_json["current"]:
        if not found:
          print(end="\n")
          found = True
        print(f"{CYAN}\t{key}: {value}{RESET}")

if not found:
  print(f"{CYAN}None{RESET}")

# --------------------------------------------------------------------------------------------------
print("3 - Secretbuddy vars that does not exist as Config var: ", end="")
os_envs_list = list(os.environ.keys())
found = False
for k, v in secretbuddy_data_json["current"].items():
    if k not in os_envs_list:
      if not found:
        print(end="\n")
        found = True
      print(f"{CYAN}\t{k}{RESET}")

if not found:
  print(f"{CYAN}None{RESET}")

# --------------------------------------------------------------------------------------------------
print("4 - Heroku command to unset all the Heroku config vars that Secretbuddy exports:")
cad = "heroku config:unset -a <app_name> "
for k, v in secretbuddy_data_json["current"].items():
   cad = cad + k + " "

print(f"\t{CYAN}{cad}{RESET}")
